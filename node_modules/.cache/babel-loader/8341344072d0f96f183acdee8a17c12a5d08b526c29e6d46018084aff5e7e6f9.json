{"ast":null,"code":"import axios from 'axios';\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n\n// baseURL = 'http://127.0.0.1:8000/';\n\n// baseURL = \"\";\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default class API {\n  constructor() {\n    this.getPlaces = async (search, category) => {\n      let url = '/places/';\n      let query = new URLSearchParams();\n      if (search) {\n        query.append('search', search);\n      }\n      if (category) {\n        query.append('category', category);\n      }\n      if (query.toString() != '') {\n        url += '?' + query.toString();\n      }\n      const places = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return places;\n    };\n    this.getCategories = async () => {\n      const categories = await api.get('/categories/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return categories;\n    };\n  }\n}","map":{"version":3,"names":["axios","baseURL","api","create","headers","API","getPlaces","search","category","url","query","URLSearchParams","append","toString","places","get","then","response","data","catch","error","Error","getCategories","categories"],"sources":["/Users/musubimanagement/Desktop/faa/sarank/frontend/src/API.js"],"sourcesContent":["import axios from 'axios';\n\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n\n// baseURL = 'http://127.0.0.1:8000/';\n\n// baseURL = \"\";\nconst api = axios.create({\n    baseURL: 'http://127.0.0.1:8000/',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default class API {\n    getPlaces = async (search, category) => {\n        let url = '/places/';\n        let query = new URLSearchParams();\n        if (search) {\n            query.append('search', search);\n        }\n        if (category) {\n            query.append('category', category);\n        }\n\n        if (query.toString() != '') {\n            url += '?' + query.toString();\n        }\n\n        const places = await api\n            .get(url)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return places;\n    };\n    getCategories = async () => {\n        const categories = await api\n            .get('/categories/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return categories;\n    };\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,IAAIC,OAAO;AACX;AACA;;AAEA;;AAEA;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBF,OAAO,EAAE,wBAAwB;EACjCG,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEF,eAAe,MAAMC,GAAG,CAAC;EAAA;IAAA,KACrBC,SAAS,GAAG,OAAOC,MAAM,EAAEC,QAAQ,KAAK;MACpC,IAAIC,GAAG,GAAG,UAAU;MACpB,IAAIC,KAAK,GAAG,IAAIC,eAAe,EAAE;MACjC,IAAIJ,MAAM,EAAE;QACRG,KAAK,CAACE,MAAM,CAAC,QAAQ,EAAEL,MAAM,CAAC;MAClC;MACA,IAAIC,QAAQ,EAAE;QACVE,KAAK,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;MACtC;MAEA,IAAIE,KAAK,CAACG,QAAQ,EAAE,IAAI,EAAE,EAAE;QACxBJ,GAAG,IAAI,GAAG,GAAGC,KAAK,CAACG,QAAQ,EAAE;MACjC;MAEA,MAAMC,MAAM,GAAG,MAAMZ,GAAG,CACnBa,GAAG,CAACN,GAAG,CAAC,CACRO,IAAI,CAACC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAI;MACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,CAAC;MAC1B,CAAC,CAAC;MACN,OAAON,MAAM;IACjB,CAAC;IAAA,KACDQ,aAAa,GAAG,YAAY;MACxB,MAAMC,UAAU,GAAG,MAAMrB,GAAG,CACvBa,GAAG,CAAC,cAAc,CAAC,CACnBC,IAAI,CAACC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAI;MACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,CAAC;MAC1B,CAAC,CAAC;MACN,OAAOG,UAAU;IACrB,CAAC;EAAA;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}